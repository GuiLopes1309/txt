Guia de Unidades de Medida no CSS: Quando usar cada uma

1. px (pixels)

Uso recomendado:

Para tamanhos fixos e precisos que não devem variar com o tamanho da tela ou texto.
Ideal para BORDAS, MARGENS e tamanhos de elementos que precisam MANTER uma aparência CONSISTENTE.

Quando evitar:

Quando você deseja que o design seja mais flexível e adaptável a diferentes tamanhos de tela e configurações de acessibilidade.

Exemplo de uso: 

html 
<div class="box">
</div>


CSS

.box {
    width: 300px; /* Largura fixa */
    heigth: 200px; /* Altura fixa */
    backgroud-color: red;
}

----------------------------------------------------------------------------------------------------------


2. em (Relative elative to Parent Font Size)

Uso recomendado:

Quando você deseja que o tamanho de um elemento seja relativo ao tamanhi da fonte de seu elemento pai.
Ideal para criar layouts e tipografia que se adaptam ao tamanho do texto do pai.


Quando evitar:

Se você precisa de consistência em relação ao tamanho da fonte em toda a aplicação, independente da hierarquia de elementos. 

Quando usar:

html

    <div class="container">

      <div class="child"

      </div>

    </div>


CSS 

.container {
    font-size: 16px; /*Tamanho base - pai*/
}

.child {
    font-size: 1.5em; /* 1.5 vezes o tamanho da fonte do pai (24px) */
}

----------------------------------------------------------------------------------------------------------

3.rem (Relative to Root Font Size)

Uso recomendado:

Para criar tamanhos de fonte e espaçamentos consistentes em toda aplicação, baseando-se no tamanho da fonte raiz (<html>).

Ideal para layouts e tipografia que precisam ser consistentes independentemente do tamanho da fonte dos elementos pais. 


Qando evitar: 

Quando você quer um tamanho que seja relativo apenas ao elemento pai específico e não à raiz.


Exemplo de uso:

html 

<div class="container">

        <div class="text">
            <p> Lorem </p>
        </div>

</div>


CSS 

html {
    font-size: 16px; /*Tamanho base da fonte*/ 
}

.text {
    font-size: 2rem; /* 32px (2 * 16px) */ 
}

----------------------------------------------------------------------------------------------------------

4.vh (viewport heigth)

Uso recomendado:

Para definir tamanhos de altura relativos à altura da viewport, como para criar seções de tela cheia ou elementos que devem ocupar uma porcentagem da altura da tela. 
Ideal para layouts que devem se ajustar à altura da tela do usuário. 

Quando evitar:

Para elementos que não precisam ser sensíveis ao tamanho da viewport e devem ter tamanhos fixos ou proporcionais ao conteúdo. 


Exemplo de uso:

html 
<section class="fullscreen-section">
        <p>lorem</p>
</section>
testar em tamanhos de telas diferentes

CSS 

.fullscreen-section {
    heigth: 100vh; /*100% da altura da viewport*/ 
    width: 50vw;
    background-color: black;
}

----------------------------------------------------------------------------------------------------------

5. vw (viewport width)

Uso Recomendado:

Para definir tamanhos de largura relativos à largura da viewport, útil para criar layouts responsivos ou elementos que devem ajustar a largura da tela. 
Ideal para elementos que precisam ocupar uma porcentagem da largura da tela do usuário. 

Quando evitar:

Para elementos cuja largura não deve depender da largura dda viewport e deve ser fixa ou proporcional ao conteúdo.

Exemplo de uso:

html
<section class="responsive-element">
             <p>lorem</p>
</section>   



CSS 
.responsive-element {
    width: 50vw; /* 50% da largura da viewport*/
    heigth: 50vh;
    background-color: yellow;
}

6. % (Percentual)

Para definir tamanhos relativos ao tamanho do elemento pai, ideal para layouts flexíveis e adaptáveis.
Útil para definir larguras e alturas dos elementos dentro de containers com tamanhos variáveis. 

Quando evitar: 
Quando o tamanho não deve depender do elemento pai, especialmente se o elemento pai não tiver um tamanho fixo ou previsível.

Exemplo de uso:

html

<div class="parent">
        <div class="child">
        </div>
</div>

CSS

.parent {
    width: 500px; /*LARGURA FIXA DO PAI*/
    backgroud-color: green;
}

.child {
    width: 50%; /* 50% da largura do elemento pai (250px) */
    backgroud-color: pink;
}
